# from mpl_toolkits.mplot3d import art3d

# def rotation_matrix(d):
#     """
#     Calculates a rotation matrix given a vector d. The direction of d
#     corresponds to the rotation axis. The length of d corresponds to 
#     the sin of the angle of rotation.
#     https://stackoverflow.com/questions/18228966/how-can-matplotlib-2d-patches-be-transformed-to-3d-with-arbitrary-normals
#     Variant of: http://mail.scipy.org/pipermail/numpy-discussion/2009-March/040806.html
#     """
#     sin_angle = np.linalg.norm(d)

#     if sin_angle == 0:
#         return np.identity(3)

#     d /= sin_angle

#     eye = np.eye(3)
#     ddt = np.outer(d, d)
#     skew = np.array([[    0,  d[2],  -d[1]],
#                   [-d[2],     0,  d[0]],
#                   [d[1], -d[0],    0]], dtype=np.float64)

#     M = ddt + np.sqrt(1 - sin_angle**2) * (eye - ddt) + sin_angle * skew
#     return M

# def pathpatch_2d_to_3d(pathpatch, z = 0, normal = 'z'):
#     """
#     Transforms a 2D Patch to a 3D patch using the given normal vector.

#     The patch is projected into they XY plane, rotated about the origin
#     and finally translated by z.
#     """
#     if type(normal) is str: #Translate strings to normal vectors
#         index = "xyz".index(normal)
#         normal = np.roll((1.0,0,0), index)

#     normal /= np.linalg.norm(normal) #Make sure the vector is normalised

#     path = pathpatch.get_path() #Get the path and the associated transform
#     trans = pathpatch.get_patch_transform()

#     path = trans.transform_path(path) #Apply the transform

#     pathpatch.__class__ = art3d.PathPatch3D #Change the class
#     pathpatch._code3d = path.codes #Copy the codes
#     pathpatch._facecolor3d = pathpatch.get_facecolor #Get the face color    

#     verts = path.vertices #Get the vertices in 2D

#     d = np.cross(normal, (0, 0, 1)) #Obtain the rotation vector    
#     M = rotation_matrix(d) #Get the rotation matrix

#     pathpatch._segment3d = np.array([np.dot(M, (x, y, 0)) + (0, 0, z) for x, y in verts])

# def pathpatch_translate(pathpatch, delta):
#     """
#     Translates the 3D pathpatch by the amount delta.
#     """
#     pathpatch._segment3d += delta
# kmeans = _kmeans[2]
# fig = plt.figure(figsize=(10,10))
# ax = fig.add_subplot(1, 1, 1, projection='3d')
# for centers in kmeans.cluster_centers_:
#     p = Circle((0,0), .12) #Add a circle in the yz plane
#     ax.add_patch(p)
#     pathpatch_2d_to_3d(p, z = 0.5, normal = 'x')
#     pathpatch_translate(p, centers)

# # p = Circle((0,0), .2, facecolor = 'r') #Add a circle in the xz plane
# # ax.add_patch(p)
# # pathpatch_2d_to_3d(p, z = 0.5, normal = 'y')
# # pathpatch_translate(p, (0.5, 1, 0))

# # p = Circle((0,0), .2, facecolor = 'g') #Add a circle in the xy plane
# # ax.add_patch(p)
# # pathpatch_2d_to_3d(p, z = 0, normal = 'z')
# # pathpatch_translate(p, (0.5, 0.5, 0.5))

# # for normal in product((-1, 1), repeat = 3):
# #     p = Circle((0,0), .2, facecolor = 'y', alpha = .2)
# #     ax.add_patch(p)
# #     pathpatch_2d_to_3d(p, z = 0, normal = (-1, 0, -1))
# #     pathpatch_translate(p, 0.5)
# # ax.view_init(azim=50, elev=50)
# plt.show()

# fig = plt.figure(figsize=(10,10))

# #===============
# #  First subplot
# #===============
# # set up the axes for the first plot
# ax = fig.add_subplot(1, 1, 1, projection='3d')

# # plot a 3D surface like in the example mplot3d/surface3d_demo
# s=sample.sample(frac=.0001)
# X = s.red
# # X = np.array([.5] * 10)
# Y = s.green
# X, Y = np.meshgrid(X, Y)
# Z = np.random.rand(10)
# Z = s.blue

# # x, y, z = map(list, zip(*kmeans.cluster_centers_))
# X, Y = np.meshgrid(X, Y)
# R = X**2 + Y**2
# Z = np.sin(R)

# surf = ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap=cm.coolwarm,
#                        linewidth=0, antialiased=True)
# # ax.set_zlim(0, 1.01)
# # fig.colorbar(surf, shrink=0.5, aspect=10)
# # for rgb in sample.groupby('cluster')[['red', 'green', 'blue']].min().values:
# #     ax.scatter(sample.red, sample.green, sample.blue, color=rgb, alpha=0.3)
# # ax.scatter(x, y, z, color=kmeans.cluster_centers_)

# #===============
# # Second subplot
# #===============
# # set up the axes for the second plot
# # ax = fig.add_subplot(1, 2, 2, projection='3d')

# # # plot a 3D wireframe like in the example mplot3d/wire3d_demo
# # X, Y, Z = get_test_data(0.05)
# # ax.plot_wireframe(X, Y, Z, rstride=10, cstride=10)
# # ax.view_init(azim=0, elev=0)
# # p = Circle((.5, -.5), .05)
# # ax.add_patch(p)
# # art3d.pathpatch_2d_to_3d(p, z=0, zdir="x")
# # pathpatch_2d_to_3d(p, z = 0, normal = 'z')
# # pathpatch_translate(p, (0.5, 0.5, 0.5))
# # art3d.
# ax.view_init(azim=0, elev=0)
# plt.show()